(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{183:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||a;return n?o.a.createElement(m,s(s({ref:t},p),{},{components:n})):o.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(2),o=n(6),a=(n(0),n(183)),i={id:"ex13-2",title:"Exercise 13-2"},s={unversionedId:"exercises/ex13-2",id:"exercises/ex13-2",isDocsHomePage:!1,title:"Exercise 13-2",description:"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work.",source:"@site/docs\\exercises\\ex13-2.md",slug:"/exercises/ex13-2",permalink:"/cs220_f20/docs/exercises/ex13-2",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/exercises/ex13-2.md",version:"current"},c=[{value:"Learning Objectives",id:"learning-objectives",children:[{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3",id:"part-3",children:[]},{value:"Part 4",id:"part-4",children:[]}]}],p={rightToc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("div",{className:"admonition admonition-info alert alert--info"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work."))),Object(a.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(a.b)("p",null,"This exercise gives you practice with expression evaluation, stacks, and exceptions."),Object(a.b)("h3",{id:"part-1"},"Part 1"),Object(a.b)("p",null,"Pull the starter code for this exercise from the public repo by taking the following steps:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Log into ugrad, then navigate into ",Object(a.b)("inlineCode",{parentName:"p"},"cs220-f20-public"),", type ",Object(a.b)("inlineCode",{parentName:"p"},"git status")," and confirm you have not modified any files or accidentally committed to the public repo. Ask for help if you have added or committed files there and need to undo.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Type ",Object(a.b)("inlineCode",{parentName:"p"},"git pull")," to synchronize your local repo and working copy with the remote repo.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Confirm that you can see the template files for today\u2019s exercise by typing ",Object(a.b)("inlineCode",{parentName:"p"},"ls exercises/ex13-2")," -- you should see files named ",Object(a.b)("inlineCode",{parentName:"p"},"stack.h"),", ",Object(a.b)("inlineCode",{parentName:"p"},"stack.cpp"),", ",Object(a.b)("inlineCode",{parentName:"p"},"bounded_stack.h"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"bounded_stack.cpp")," inside.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Copy the above files from the public class repository (in the ",Object(a.b)("inlineCode",{parentName:"p"},"/exercises/ex13-2/")," directory) to your personal repo in a new directory named ",Object(a.b)("inlineCode",{parentName:"p"},"ex13-2")," under ",Object(a.b)("inlineCode",{parentName:"p"},"~/cs220/exercises/"),"."))),Object(a.b)("h3",{id:"part-2"},"Part 2"),Object(a.b)("p",null,"In this part, you will write a program to evaluate a postfix expression comprising of numeric values and basic arithmetic operators ",Object(a.b)("inlineCode",{parentName:"p"},"(*, /, +, -)"),". We are used to read infix expressions where operators come in-between the operands (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"2.22 * 3.98 / 3.47 + 1"),"). However, we may write an expression in prefix (operator comes before the operands) or postfix (operator comes ",Object(a.b)("em",{parentName:"p"},"after")," the operands) styles too. The postfix equivalent of the infix expression ",Object(a.b)("inlineCode",{parentName:"p"},"2.22 * 3.98 / 3.47 + 1")," is ",Object(a.b)("inlineCode",{parentName:"p"},"2.22 3.98 * 3.47 / 1 +"),". The nice thing about postfix expressions is that neither precedence rules nor parentheses are needed (think about why!)."),Object(a.b)("p",null,"A typical program to evaluate postfix expressions uses a stack. Here is high-level pseudocode: "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Create an empty stack and keep scanning the expression (from left to right) as long as there are more tokens to read: ",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"If the encountered token is an operand (a number), push it onto the stack."),Object(a.b)("li",{parentName:"ul"},"If the encountered token is an operator ",Object(a.b)("inlineCode",{parentName:"li"},"O"),", pop the stack twice to get numeric values ",Object(a.b)("inlineCode",{parentName:"li"},"A")," and ",Object(a.b)("inlineCode",{parentName:"li"},"B")," respectively. Calculate ",Object(a.b)("inlineCode",{parentName:"li"},"B O A")," and push the result back to the stack."))),Object(a.b)("li",{parentName:"ul"},"When the expression is ended, there should be only one numeric value in the stack showing the final result of the expression.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example:")," ",Object(a.b)("inlineCode",{parentName:"p"},"4 5 6 * +")),Object(a.b)("p",null,Object(a.b)("img",Object(r.a)({parentName:"p"},{src:"https://jhu-ip.github.io/cs220_f20/img/postfix.png",alt:null}))),Object(a.b)("p",null,"Given the completed stack files from Exercise 13-1, write a program in a new file named ",Object(a.b)("inlineCode",{parentName:"p"},"postfix_interpreter.cpp")," to accomplish the above. Your program should ask the user to enter a postfix expression and then print the result. Be sure to make good use of the exceptions that the stack might throw to let you know something has gone wrong!"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note 1:")," If we "),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"end up having more than one value left in the stack at the end of the expression, "),Object(a.b)("li",{parentName:"ol"},"try to pop an empty stack (i.e., ",Object(a.b)("inlineCode",{parentName:"li"},"underflow_error"),"), or "),Object(a.b)("li",{parentName:"ol"},"encounter invalid values and/or types or operator(s), then it means that the entered expression is invalid. Your code should account for these scenarios and show the message \u201cinvalid expression!\u201d.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note 2:")," Account for the case where a division by zero happens and show the message ",Object(a.b)("inlineCode",{parentName:"p"},"\u201cdivision by zero occurred!\u201d"),"."),Object(a.b)("h3",{id:"part-3"},"Part 3"),Object(a.b)("p",null,"Modify the program above to repeatedly ask the user for a line containing a postfix expression and show the results, one at a time. The program should terminate when the end of input is reached. Note that in each iteration you need to start with a fresh (i.e., empty) stack."),Object(a.b)("h3",{id:"part-4"},"Part 4"),Object(a.b)("p",null,"Now, modify your program to work with a bounded stack. If, during the evaluation of an expression, we exceed the stack capacity, you need to print a message ",Object(a.b)("inlineCode",{parentName:"p"},"\u201ctoo many operands on the stack!\u201d"),". Make use of the ",Object(a.b)("inlineCode",{parentName:"p"},"overflow_error")," exception that the class already throws."))}l.isMDXComponent=!0}}]);