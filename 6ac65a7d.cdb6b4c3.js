(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{111:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n(2),o=n(6),i=(n(0),n(183)),r={id:"ex8-1",title:"Exercise 8-1"},c={unversionedId:"exercises/ex8-1",id:"exercises/ex8-1",isDocsHomePage:!1,title:"Exercise 8-1",description:"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work.",source:"@site/docs\\exercises\\ex8-1.md",slug:"/exercises/ex8-1",permalink:"/cs220_f20/docs/exercises/ex8-1",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/exercises/ex8-1.md",version:"current"},p=[{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3",id:"part-3",children:[]},{value:"Part 4",id:"part-4",children:[]},{value:"Part 5",id:"part-5",children:[]}],s={rightToc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work."))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Get started by running ",Object(i.b)("inlineCode",{parentName:"p"},"git pull")," to update your clone of the public repository, and then copying the ",Object(i.b)("inlineCode",{parentName:"p"},"exercises/ex8-1")," directory into your personal git repository."))),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Learning Objectives")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Reinforces concepts learned in today meeting:"),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"C++ basics: I/O using iostream library, how to compile/link/execute"),Object(i.b)("li",{parentName:"ul"},"Using the C++ Standard Template Library (std::vector, std::map) and iterators")))),Object(i.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"Goal")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Complete the implementation of code which counts the number of occurrences of particular words in a file, and then reports the results in different orderings by utilizing ",Object(i.b)("inlineCode",{parentName:"p"},"std::map"),"."))),Object(i.b)("h3",{id:"part-1"},"Part 1"),Object(i.b)("p",null,"Pull the starter code for this exercise from the public repo by taking the following steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Log into ugrad, then navigate into ",Object(i.b)("inlineCode",{parentName:"p"},"cs220-f20-public"),", type ",Object(i.b)("inlineCode",{parentName:"p"},"git status")," and confirm you have not modified any files or accidentally committed to the public repo. Ask for help if you have added or committed files there and need to undo.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Type ",Object(i.b)("inlineCode",{parentName:"p"},"git pull")," to synchronize your local repo and working copy with the remote repo.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Confirm that you can see the template files for today\u2019s exercise by typing ",Object(i.b)("inlineCode",{parentName:"p"},"ls exercises/ex8-1")," -- you should see files named ",Object(i.b)("inlineCode",{parentName:"p"},"map-simple.cpp"),", ",Object(i.b)("inlineCode",{parentName:"p"},"input.txt"),", ",Object(i.b)("inlineCode",{parentName:"p"},"main.cpp"),", and `monkeys.txt inside.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Copy ",Object(i.b)("inlineCode",{parentName:"p"},"map-simple.cpp"),", ",Object(i.b)("inlineCode",{parentName:"p"},"input.txt"),", ",Object(i.b)("inlineCode",{parentName:"p"},"main.cpp"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"monkeys.txt")," from the public class repository (in the ",Object(i.b)("inlineCode",{parentName:"p"},"/exercises/ex8-1/")," directory) to your personal repo in a new directory named ",Object(i.b)("inlineCode",{parentName:"p"},"ex9-1")," under ",Object(i.b)("inlineCode",{parentName:"p"},"~/cs220/exercises/"),"."))),Object(i.b)("h3",{id:"part-2"},"Part 2"),Object(i.b)("p",null,"The supplied file ",Object(i.b)("inlineCode",{parentName:"p"},"map-simple.cpp")," is a completed program that takes in input pairs from standard input representing phone contacts made of a name string and a phone number string, and inserts each into a ",Object(i.b)("inlineCode",{parentName:"p"},"std::map")," structure.  The name is the key in the map, and the phone number for that person is the value associated with that key in the map.  This program will serve as a reference for you to follow as you work with ",Object(i.b)("inlineCode",{parentName:"p"},"std::map"),"s to complete the remainder of the exercise."),Object(i.b)("p",null,"First, compile and link ",Object(i.b)("inlineCode",{parentName:"p"},"map-simple.cpp")," by typing:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"g++ -std=c++11 -Wall -Wextra -pedantic map-simple.cpp -o map-simple\n")),Object(i.b)("p",null,"Next, run the executable ",Object(i.b)("inlineCode",{parentName:"p"},"map-simple")," using the file ",Object(i.b)("inlineCode",{parentName:"p"},"input.txt")," in place of interactive input by typing:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cat input.txt | ./map-simple\n")),Object(i.b)("p",null,"Now, look inside ",Object(i.b)("inlineCode",{parentName:"p"},"input.txt")," and then the code in ",Object(i.b)("inlineCode",{parentName:"p"},"map-simple.cpp")," and try to to understand how it works.  Here are a few items we want to highlight:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Notice that four (name,phone) pairs are present in the input file, but only three remain in the map when it is output.  This illustrates an important point about maps: only one occurrence of a key value is allowed (that is, the original value for the key Sara is replaced by the second value supplied later in the input file).  "),Object(i.b)("li",{parentName:"ul"},"We make use of a ",Object(i.b)("inlineCode",{parentName:"li"},"const_iterator")," named ",Object(i.b)("inlineCode",{parentName:"li"},"it")," to traverse the map entries so we can output them.  Each entry is a pair, and it runs over each of them in succession, so when we access ",Object(i.b)("inlineCode",{parentName:"li"},"it->first"),", we get the current entry's ",Object(i.b)("em",{parentName:"li"},"key")," (i.e. name), and when we access ",Object(i.b)("inlineCode",{parentName:"li"},"it->second"),", we get the current entry's value (i.e. phone number)."),Object(i.b)("li",{parentName:"ul"},"Note also that the values in the map are output in ascending order by key (i.e. name) value, even though they were not inserted in that order.  We did not need to explicitly sort them in our code, either.  ")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"A map will always organize its entries in ascending order by key."))),Object(i.b)("p",null,"Before moving on to the next portion, make sure you follow what is happening in this code. Rushing to the next part without understanding this code will not get you done with this exercise any more quickly! Please ask questions if something does not make sense.  "),Object(i.b)("h3",{id:"part-3"},"Part 3"),Object(i.b)("p",null,"Now, you will work to edit ",Object(i.b)("inlineCode",{parentName:"p"},"main.cpp")," to work with maps in a more sophisticated way. "),Object(i.b)("p",null,"In this part, you'll add code to read in words from standard input until end of file occurs, and populate the ",Object(i.b)("inlineCode",{parentName:"p"},"map<string, int>")," named ",Object(i.b)("inlineCode",{parentName:"p"},"counters")," so that each entry has a key which is a word collected and the corresponding value is the number of times that word appears in the file.  The code to output the counters map contents is already present in this file.   "),Object(i.b)("p",null,"Once you've modified it, you'll compile ",Object(i.b)("inlineCode",{parentName:"p"},"main.cpp")," using:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"g++ -std=c++11 -Wall -Wextra -pedantic main.cpp -o main\n")),Object(i.b)("p",null,"Next, run the executable ",Object(i.b)("inlineCode",{parentName:"p"},"main")," using the file ",Object(i.b)("inlineCode",{parentName:"p"},"monkeys.txt")," in place of interactive input by typing:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"cat monkeys.txt | ./main\n")),Object(i.b)("p",null,"Note that the contents of ",Object(i.b)("inlineCode",{parentName:"p"},"monkeys.txt")," are as shown below:                                   "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"and Mama called the doctor and the doctor said no more monkeys")),Object(i.b)("p",null,"So, if your code works correctly, you should see the following output:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"word Mama has 1 occurrences \nword and has 2 occurrences \nword called has 1 occurrences \nword doctor has 2 occurrences \nword monkeys has 1 occurrences \nword more has 1 occurrences \nword no has 1 occurrences \nword said has 1 occurrences \nword the has 2 occurrences\n")),Object(i.b)("h3",{id:"part-4"},"Part 4"),Object(i.b)("p",null,"Once you have the counters map properly populated, and you confirmed that your output is correct, you can now work on rearranging that data you collected during Part 3."),Object(i.b)("p",null,"In this part, you need to write code that will go through the simple ",Object(i.b)("inlineCode",{parentName:"p"},"counters")," map you populated and copy over the data into a new map called ",Object(i.b)("inlineCode",{parentName:"p"},"words_by_freq"),", but rearrange your data so that each entry in the new map has an integer key, and has an entire vector of strings as its value. The vector will hold all strings with the frequency indicated by the key integer.  Recall that the ",Object(i.b)("inlineCode",{parentName:"p"},"push_back")," method in ",Object(i.b)("inlineCode",{parentName:"p"},"std::vector")," allows you to add an item at the end of a vector."),Object(i.b)("p",null,"Once you have done this properly, if run with ",Object(i.b)("inlineCode",{parentName:"p"},"monkeys.txt")," as input, your ",Object(i.b)("inlineCode",{parentName:"p"},"words_by_freq")," map will contain entries like this:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"key (an ",Object(i.b)("em",{parentName:"th"},"int"),")"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"value (a ",Object(i.b)("em",{parentName:"th"},"vector")," of strings)"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Mama, called, monkeys, more, no, said")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"2"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"and, doctor, the")))),Object(i.b)("p",null,"You can think of the ",Object(i.b)("inlineCode",{parentName:"p"},"words_by_freq")," map as a notebook of information, where each entry is a page, and at the top of the page, you wrote an integer frequency, and on the rest of the page, you've written a list of all the words you encountered with that frequency."),Object(i.b)("p",null,"To confirm that your code is correct, move onto Part 5 where you will write the code to output its contents."),Object(i.b)("h3",{id:"part-5"},"Part 5"),Object(i.b)("p",null,"Using ",Object(i.b)("inlineCode",{parentName:"p"},"const_iterators")," (not just one but two!), write code to output the contents of the ",Object(i.b)("inlineCode",{parentName:"p"},"words_by_freq")," map you populated.  This means that for each entry in the map, you will need to output the frequency key, and then iterate separately over the strings in the vector. (Happily, iterators can be used over vectors as well as maps!)"),Object(i.b)("p",null,"So, if the input words are the contents of ",Object(i.b)("inlineCode",{parentName:"p"},"monkeys.txt"),", then the output would from this part should be:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"Frequency: 1\nMama\ncalled\nmonkeys \nmore \nno \nsaid                                                                    \nFrequency: 2 \nand \ndoctor \nthe  \n")),Object(i.b)("p",null,"If some frequency does not exist in the table, then your code should not output it.  For example, if your input was the following words:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"the tall tall tall giraffe")),Object(i.b)("p",null,"Then the output from this part would be:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"Frequency: 1\ngiraffe\nthe\nFrequency: 3\ntall\n")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The words for each frequency shown in the sample output above are shown in alphabetical (dictionary) ordering.  Recall that unlike ",Object(i.b)("inlineCode",{parentName:"p"},"std::map")," a ",Object(i.b)("inlineCode",{parentName:"p"},"std::vector")," is not automatically stored in order based on ",Object(i.b)("inlineCode",{parentName:"p"},"<"),", so think about why this is.",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("strong",{parentName:"p"},"Hint:")," we did not use ",Object(i.b)("inlineCode",{parentName:"p"},"std:sort")," or even go out of our way at all to make this happen!"))))}l.isMDXComponent=!0},183:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),b=l(n),m=a,u=b["".concat(r,".").concat(m)]||b[m]||d[m]||i;return n?o.a.createElement(u,c(c({ref:t},s),{},{components:n})):o.a.createElement(u,c({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);