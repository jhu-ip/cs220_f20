(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{151:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n(2),r=n(6),o=(n(0),n(183)),i={id:"ex13-1",title:"Exercise 13-1"},c={unversionedId:"exercises/ex13-1",id:"exercises/ex13-1",isDocsHomePage:!1,title:"Exercise 13-1",description:"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work.",source:"@site/docs\\exercises\\ex13-1.md",slug:"/exercises/ex13-1",permalink:"/cs220_f20/docs/exercises/ex13-1",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/exercises/ex13-1.md",version:"current"},p=[{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3",id:"part-3",children:[]},{value:"Part 4",id:"part-4",children:[]},{value:"Part 5",id:"part-5",children:[]},{value:"Part 6",id:"part-6",children:[]}],s={rightToc:p};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"As you work, feel free to discuss with other students and ask questions of the Professor/CAs. Aim to complete as much as possible during our meeting time. Work at home to complete what you do not get through during class. You will not hand in your work."))),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Learning Objectives")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This exercise is designed to be a review of several concepts we have covered in this half of the course: classes, dynamic memory alloc, overloaded operators, iterators, and exceptions.   As you work on this exercise, you may find the following list of standard C++ exceptions useful: ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://en.cppreference.com/w/cpp/error/exception"}),"http://en.cppreference.com/w/cpp/error/exception"),"."))),Object(o.b)("h3",{id:"part-1"},"Part 1"),Object(o.b)("p",null,"Pull the starter code for this exercise from the public repo by taking the following steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Log into ugrad, then navigate into ",Object(o.b)("inlineCode",{parentName:"p"},"cs220-f20-public"),", type ",Object(o.b)("inlineCode",{parentName:"p"},"git status")," and confirm you have not modified any files or accidentally committed to the public repo. Ask for help if you have added or committed files there and need to undo.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Type ",Object(o.b)("inlineCode",{parentName:"p"},"git pull")," to synchronize your local repo and working copy with the remote repo.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Confirm that you can see the template files for today\u2019s exercise by typing ",Object(o.b)("inlineCode",{parentName:"p"},"ls exercises/ex13-1")," -- you should see files named ",Object(o.b)("inlineCode",{parentName:"p"},"stack.h"),", ",Object(o.b)("inlineCode",{parentName:"p"},"stack.cpp"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"main1.cpp")," inside.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Copy the above files from the public class repository (in the ",Object(o.b)("inlineCode",{parentName:"p"},"/exercises/ex13-1/")," directory) to your personal repo in a new directory named ",Object(o.b)("inlineCode",{parentName:"p"},"ex13-1")," under ",Object(o.b)("inlineCode",{parentName:"p"},"~/cs220/exercises/"),"."))),Object(o.b)("h3",{id:"part-2"},"Part 2"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Stack")," class is supposed to be a stack of real number values. A stack is a data structure such that additions and deletions can only take place at one end of the collection, called the top. You must implement your stack with an array (not any STL classes) in order for our provided iterator to work. The base ",Object(o.b)("inlineCode",{parentName:"p"},"Stack")," class you create should operate with an unbounded size. For this part of the exercise, implement the basic functions for the stack class (",Object(o.b)("inlineCode",{parentName:"p"},"constructor, destructor, isEmpty, push, pop, top"),"), as sketched in ",Object(o.b)("inlineCode",{parentName:"p"},"stack.h"),"."),Object(o.b)("p",null,"Once the base class is written, add a derived ",Object(o.b)("inlineCode",{parentName:"p"},"BoundedStack")," class. This class should have a constructor that specifies an upper limit for the stack size. Override any methods necessary so that no more than the allowed upper limit number of values get added onto a ",Object(o.b)("inlineCode",{parentName:"p"},"BoundedStack"),"."),Object(o.b)("h3",{id:"part-3"},"Part 3"),Object(o.b)("p",null,"Even though we only manipulate a ",Object(o.b)("inlineCode",{parentName:"p"},"Stack")," at one end, having a ",Object(o.b)("inlineCode",{parentName:"p"},"const_iterator")," can be very handy for things such as overloading the ",Object(o.b)("inlineCode",{parentName:"p"},"operator<<")," in order to display the full contents of the Stack. For this part of the exercise, you should review the provided iterators, paying particular attention to the need for the nested iterators to hold references to the Stack over which they are iterating! Then, using your ",Object(o.b)("inlineCode",{parentName:"p"},"const_iterator"),", implement ",Object(o.b)("inlineCode",{parentName:"p"},"operator<<"),", and then implement ",Object(o.b)("inlineCode",{parentName:"p"},"operator>>")," which will get double values from an input stream and push them onto the ",Object(o.b)("inlineCode",{parentName:"p"},"Stack"),"."),Object(o.b)("h3",{id:"part-4"},"Part 4"),Object(o.b)("p",null,"If you have not already, add these exceptions to the code you have written:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If push is called on a full bounded stack, throw an ",Object(o.b)("inlineCode",{parentName:"li"},"overflow_error")," exception."),Object(o.b)("li",{parentName:"ul"},"If an attempt to grow an unbounded stack fails, catch the ",Object(o.b)("inlineCode",{parentName:"li"},"bad_alloc")," exception and throw an ",Object(o.b)("inlineCode",{parentName:"li"},"overflow_error")," exception instead. "),Object(o.b)("li",{parentName:"ul"},"If ",Object(o.b)("inlineCode",{parentName:"li"},"pop")," or ",Object(o.b)("inlineCode",{parentName:"li"},"top")," are called on an empty stack, throw an ",Object(o.b)("inlineCode",{parentName:"li"},"underflow_error")," exception."),Object(o.b)("li",{parentName:"ul"},"Modify your ",Object(o.b)("inlineCode",{parentName:"li"},"operator>>")," to catch and handle an ",Object(o.b)("inlineCode",{parentName:"li"},"overflow_error")," exception when reading into a Stack."),Object(o.b)("li",{parentName:"ul"},"Modify your ",Object(o.b)("inlineCode",{parentName:"li"},"operator>>")," to detect and throw a ",Object(o.b)("inlineCode",{parentName:"li"},"runtime_error")," exception if an attempt to read a token that is not a double number occurs.")),Object(o.b)("h3",{id:"part-5"},"Part 5"),Object(o.b)("p",null,"Run ",Object(o.b)("inlineCode",{parentName:"p"},"main1.cpp")," to see whether your code is working properly. Then add exception handling and change main so that it tries to add values to an already full ",Object(o.b)("inlineCode",{parentName:"p"},"BoundedStack")," (just change the capacity). Also run main with both good put values and invalid input values (ie, strings that are not numbers). Test reading input from the user and adding to the ",Object(o.b)("inlineCode",{parentName:"p"},"BoundedStack"),". Any time an exception is caught in main, print it and then continue with whatever else should be happening."),Object(o.b)("h3",{id:"part-6"},"Part 6"),Object(o.b)("p",null,"For extra practices and review for the final exam, following the rule of three - implement a copy constructor and an overloaded ",Object(o.b)("inlineCode",{parentName:"p"},"operator=")," for the ",Object(o.b)("inlineCode",{parentName:"p"},"Stack")," class. Consider whether either needs to be overridden for a ",Object(o.b)("inlineCode",{parentName:"p"},"BoundedStack"),". (For even more practice, create a ",Object(o.b)("inlineCode",{parentName:"p"},"templated Stack")," class.)"))}l.isMDXComponent=!0},183:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),l=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,m=d["".concat(i,".").concat(u)]||d[u]||b[u]||o;return n?r.a.createElement(m,c(c({ref:t},s),{},{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);